var app = require('../app');
var debug = require('debug');
const serverLogger = debug('backend:server');
const dbLogger = debug('backend:mongodb');
var http = require('http');

const mongoose = require('mongoose');
mongoose.set("strictQuery", false);
const { mongoURI: db } = require('../config/keys.js');


//Get port from environment and store in Express.*/

// change the default port from 3000 to 5000:
var port = normalizePort(process.env.PORT || '5001');
app.set('port', port);




//Create HTTP server.*/

const server = http.createServer(app);



//Connect to Mongo database, then allow the server to listen for requests*/

mongoose
  .connect(db, { useNewUrlParser: true })
  .then(() => {
    // Use debug instead of dbLogger if you did not split the debug
    // console into dbLogger and serverLogger above.
    dbLogger("Connected to MongoDB successfully");
    server.listen(port);
  })
  // Use debug instead of serverLogger if you did not split the debug
  // console into dbLogger and serverLogger above.
  .catch(err => serverLogger(err));



//Listen on provided port, on all network interfaces.*/

// listen for requests on the specified port:
// server.listen(port);
// failure callback when server has trouble starting:
server.on('error', onError);
// success callback when server starts:
server.on('listening', onListening);


// Normalize a port into a number, string, or false.*

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  //Event listener for HTTP server "error" event.*/

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**

  Event listener for HTTP server "listening" event.*/

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
